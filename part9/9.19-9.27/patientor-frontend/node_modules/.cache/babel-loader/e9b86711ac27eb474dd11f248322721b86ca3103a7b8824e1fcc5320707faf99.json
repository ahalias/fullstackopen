{"ast":null,"code":"var _jsxFileName = \"/Users/ahalias/projects/open/patientor/patientor-frontend/src/components/PatientEntries.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport patientService from \"../services/patients\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientEntries = _ref => {\n  _s();\n  var _useParams$id;\n  let {\n    entries\n  } = _ref;\n  const id = ((_useParams$id = useParams().id) === null || _useParams$id === void 0 ? void 0 : _useParams$id.toString()) || null;\n  const [diagnoses, setDiagnoses] = useState(null);\n  useEffect(() => {\n    const fetchDiagnoses = async () => {\n      const fetchedDiagnoses = await patientService.getDiagnoses(id);\n      setDiagnoses(fetchedDiagnoses);\n    };\n    fetchDiagnoses();\n  }, [diagnoses, id]);\n  function assertNever(value) {\n    throw new Error(`Unhandled value: ${value}`);\n  }\n  return entries.map(entry => {\n    var _entry$diagnosisCodes, _entry$diagnosisCodes2, _entry$diagnosisCodes3;\n    switch (entry.type) {\n      case \"Hospital\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [entry.date, \" \", entry.description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 72\n          }, this), (_entry$diagnosisCodes = entry.diagnosisCodes) === null || _entry$diagnosisCodes === void 0 ? void 0 : _entry$diagnosisCodes.map(diagnose => {\n            var _diagnoses$find;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [diagnose, \" \", diagnoses === null || diagnoses === void 0 ? void 0 : (_diagnoses$find = diagnoses.find(it => it.code.toLowerCase() === diagnose.toLowerCase())) === null || _diagnoses$find === void 0 ? void 0 : _diagnoses$find.name]\n            }, diagnose, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 126\n            }, this);\n          })]\n        }, entry.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 20\n        }, this);\n      case \"OccupationalHealthcare\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [entry.date, \" \", entry.description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 76\n          }, this), (_entry$diagnosisCodes2 = entry.diagnosisCodes) === null || _entry$diagnosisCodes2 === void 0 ? void 0 : _entry$diagnosisCodes2.map(diagnose => {\n            var _diagnoses$find2;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [diagnose, \" \", diagnoses === null || diagnoses === void 0 ? void 0 : (_diagnoses$find2 = diagnoses.find(it => it.code.toLowerCase() === diagnose.toLowerCase())) === null || _diagnoses$find2 === void 0 ? void 0 : _diagnoses$find2.name]\n            }, diagnose, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 130\n            }, this);\n          })]\n        }, entry.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 24\n        }, this);\n      case \"HealthCheck\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [entry.date, \" \", entry.description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 76\n          }, this), (_entry$diagnosisCodes3 = entry.diagnosisCodes) === null || _entry$diagnosisCodes3 === void 0 ? void 0 : _entry$diagnosisCodes3.map(diagnose => {\n            var _diagnoses$find3;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [diagnose, \" \", diagnoses === null || diagnoses === void 0 ? void 0 : (_diagnoses$find3 = diagnoses.find(it => it.code.toLowerCase() === diagnose.toLowerCase())) === null || _diagnoses$find3 === void 0 ? void 0 : _diagnoses$find3.name]\n            }, diagnose, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 130\n            }, this);\n          })]\n        }, entry.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 24\n        }, this);\n      default:\n        return assertNever(entry);\n    }\n  });\n};\n_s(PatientEntries, \"wcJKpi6GuT2LsJAne/TynslFzWo=\", false, function () {\n  return [useParams];\n});\n_c = PatientEntries;\nexport default PatientEntries;\nvar _c;\n$RefreshReg$(_c, \"PatientEntries\");","map":{"version":3,"names":["useEffect","useState","patientService","useParams","PatientEntries","entries","id","toString","diagnoses","setDiagnoses","fetchDiagnoses","fetchedDiagnoses","getDiagnoses","assertNever","value","Error","map","entry","type","date","description","diagnosisCodes","diagnose","find","it","code","toLowerCase","name"],"sources":["/Users/ahalias/projects/open/patientor/patientor-frontend/src/components/PatientEntries.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Diagnosis, Entry } from \"../types\";\nimport patientService from \"../services/patients\";\nimport { useParams } from \"react-router-dom\";\n\n\nconst PatientEntries: React.FC<{ entries: Entry[] }> = ({ entries }: {entries: Entry[]} ) => {\n    const id = useParams().id?.toString() || null;\n\n    const [diagnoses, setDiagnoses] = useState<Diagnosis[] | null>(null)\n\n\n    useEffect(() => {\n        const fetchDiagnoses = async () => {\n            const fetchedDiagnoses = await patientService.getDiagnoses(id)\n            setDiagnoses(fetchedDiagnoses)\n        }\n        fetchDiagnoses()\n    }, [diagnoses, id])\n\n\n    function assertNever(value: never): never {\n        throw new Error(`Unhandled value: ${value}`);\n      }\n\nreturn (\n    entries.map(entry => {\n        switch (entry.type) {\n          case \"Hospital\":\n            return <div key={entry.id}>{entry.date} {entry.description}<br />{entry.diagnosisCodes?.map(diagnose => { return <li key={diagnose}>\n                {diagnose} {diagnoses?.find(it => it.code.toLowerCase() === diagnose.toLowerCase())?.name}\n              </li> })}</div>;\n            case \"OccupationalHealthcare\":\n                return <div key={entry.id}>{entry.date} {entry.description}<br />{entry.diagnosisCodes?.map(diagnose => { return <li key={diagnose}>\n                    {diagnose} {diagnoses?.find(it => it.code.toLowerCase() === diagnose.toLowerCase())?.name}\n                  </li> })}</div>;            \n            case \"HealthCheck\":\n                return <div key={entry.id}>{entry.date} {entry.description}<br />{entry.diagnosisCodes?.map(diagnose => { return <li key={diagnose}>\n                    {diagnose} {diagnoses?.find(it => it.code.toLowerCase() === diagnose.toLowerCase())?.name}\n                  </li> })}</div>;\n            default:\n            return assertNever(entry);\n        }\n        \n    })\n)\n}\n\nexport default PatientEntries;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,cAAc,MAAM,sBAAsB;AACjD,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAG7C,MAAMC,cAA8C,GAAG,QAAsC;EAAA;EAAA;EAAA,IAArC;IAAEC;EAA4B,CAAC;EACnF,MAAMC,EAAE,GAAG,kBAAAH,SAAS,EAAE,CAACG,EAAE,kDAAd,cAAgBC,QAAQ,EAAE,KAAI,IAAI;EAE7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAqB,IAAI,CAAC;EAGpED,SAAS,CAAC,MAAM;IACZ,MAAMU,cAAc,GAAG,YAAY;MAC/B,MAAMC,gBAAgB,GAAG,MAAMT,cAAc,CAACU,YAAY,CAACN,EAAE,CAAC;MAC9DG,YAAY,CAACE,gBAAgB,CAAC;IAClC,CAAC;IACDD,cAAc,EAAE;EACpB,CAAC,EAAE,CAACF,SAAS,EAAEF,EAAE,CAAC,CAAC;EAGnB,SAASO,WAAW,CAACC,KAAY,EAAS;IACtC,MAAM,IAAIC,KAAK,CAAE,oBAAmBD,KAAM,EAAC,CAAC;EAC9C;EAEN,OACIT,OAAO,CAACW,GAAG,CAACC,KAAK,IAAI;IAAA;IACjB,QAAQA,KAAK,CAACC,IAAI;MAChB,KAAK,UAAU;QACb,oBAAO;UAAA,WAAqBD,KAAK,CAACE,IAAI,EAAC,GAAC,EAACF,KAAK,CAACG,WAAW,eAAC;YAAA;YAAA;YAAA;UAAA,QAAM,2BAACH,KAAK,CAACI,cAAc,0DAApB,sBAAsBL,GAAG,CAACM,QAAQ,IAAI;YAAA;YAAE,oBAAO;cAAA,WAC5GA,QAAQ,EAAC,GAAC,EAACd,SAAS,aAATA,SAAS,0CAATA,SAAS,CAAEe,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACC,IAAI,CAACC,WAAW,EAAE,KAAKJ,QAAQ,CAACI,WAAW,EAAE,CAAC,oDAAvE,gBAAyEC,IAAI;YAAA,GAD6BL,QAAQ;cAAA;cAAA;cAAA;YAAA,QAE3H;UAAC,CAAC,CAAC;QAAA,GAFOL,KAAK,CAACX,EAAE;UAAA;UAAA;UAAA;QAAA,QAER;MACjB,KAAK,wBAAwB;QACzB,oBAAO;UAAA,WAAqBW,KAAK,CAACE,IAAI,EAAC,GAAC,EAACF,KAAK,CAACG,WAAW,eAAC;YAAA;YAAA;YAAA;UAAA,QAAM,4BAACH,KAAK,CAACI,cAAc,2DAApB,uBAAsBL,GAAG,CAACM,QAAQ,IAAI;YAAA;YAAE,oBAAO;cAAA,WAC5GA,QAAQ,EAAC,GAAC,EAACd,SAAS,aAATA,SAAS,2CAATA,SAAS,CAAEe,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACC,IAAI,CAACC,WAAW,EAAE,KAAKJ,QAAQ,CAACI,WAAW,EAAE,CAAC,qDAAvE,iBAAyEC,IAAI;YAAA,GAD6BL,QAAQ;cAAA;cAAA;cAAA;YAAA,QAE3H;UAAC,CAAC,CAAC;QAAA,GAFOL,KAAK,CAACX,EAAE;UAAA;UAAA;UAAA;QAAA,QAER;MACrB,KAAK,aAAa;QACd,oBAAO;UAAA,WAAqBW,KAAK,CAACE,IAAI,EAAC,GAAC,EAACF,KAAK,CAACG,WAAW,eAAC;YAAA;YAAA;YAAA;UAAA,QAAM,4BAACH,KAAK,CAACI,cAAc,2DAApB,uBAAsBL,GAAG,CAACM,QAAQ,IAAI;YAAA;YAAE,oBAAO;cAAA,WAC5GA,QAAQ,EAAC,GAAC,EAACd,SAAS,aAATA,SAAS,2CAATA,SAAS,CAAEe,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACC,IAAI,CAACC,WAAW,EAAE,KAAKJ,QAAQ,CAACI,WAAW,EAAE,CAAC,qDAAvE,iBAAyEC,IAAI;YAAA,GAD6BL,QAAQ;cAAA;cAAA;cAAA;YAAA,QAE3H;UAAC,CAAC,CAAC;QAAA,GAFOL,KAAK,CAACX,EAAE;UAAA;UAAA;UAAA;QAAA,QAER;MACrB;QACA,OAAOO,WAAW,CAACI,KAAK,CAAC;IAAC;EAGlC,CAAC,CAAC;AAEN,CAAC;AAAA,GAxCKb,cAA8C;EAAA,QACrCD,SAAS;AAAA;AAAA,KADlBC,cAA8C;AA0CpD,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}